import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s', level=logging.INFO)

rock_genres = {}
rock_genre_images = {}
CHANNEL_USERNAME = ""

async def check_subscription(user_id, context):
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        return False

async def send_main_menu(update: Update, image_url: str = None):
    keyboard = [
        [InlineKeyboardButton("–ê–ª—Ñ–∞–≤–∏—Ç", callback_data="alphabet")],
        [InlineKeyboardButton("–ü–æ–¥–∂–∞–Ω—Ä—ã", callback_data="genres")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if image_url:
        await update.message.reply_photo(photo=image_url, caption='üé∂ –ü—Ä–∏–≤–µ—Ç, —Ä–æ–∫-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç! –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ '
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ª—é–±–∏–º—ã—Ö –∫–ª–∏–ø–æ–≤: –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É ‚Äì –µ—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å, '
            '—Å –∫–∞–∫–æ–π –±—É–∫–≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤! –ü–æ –ø–æ–¥–∂–∞–Ω—Ä–∞–º ‚Äì –¥–ª—è —Ç–µ—Ö, '
            '–∫—Ç–æ —Ö–æ—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–æ–∫-–º—É–∑—ã–∫–∏! –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:', reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            'üé∂ –ü—Ä–∏–≤–µ—Ç, —Ä–æ–∫-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç! –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ '
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ª—é–±–∏–º—ã—Ö –∫–ª–∏–ø–æ–≤: –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É ‚Äì –µ—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å, '
            '—Å –∫–∞–∫–æ–π –±—É–∫–≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤! –ü–æ –ø–æ–¥–∂–∞–Ω—Ä–∞–º ‚Äì –¥–ª—è —Ç–µ—Ö, '
            '–∫—Ç–æ —Ö–æ—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–æ–∫-–º—É–∑—ã–∫–∏! –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:',
            reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    image_url = 'https://logodix.com/logo/580915.png' 
    await send_main_menu(update, image_url=image_url)

async def send_search_options(update: Update):
    keyboard = [
        [InlineKeyboardButton("–ê–ª—Ñ–∞–≤–∏—Ç", callback_data="alphabet")],
        [InlineKeyboardButton("–ü–æ–¥–∂–∞–Ω—Ä—ã", callback_data="genres")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        '–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ª—é–±–∏–º—ã—Ö –∫–ª–∏–ø–æ–≤: –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏–ª–∏ –ø–æ –ø–æ–¥–∂–∞–Ω—Ä–∞–º.',
        reply_markup=reply_markup)

async def check_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id, context)

    query = update.callback_query
    await query.answer()

    if is_subscribed:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É", callback_data="go_to_search")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text="–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", reply_markup=reply_markup)
    else:
        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.',
            reply_markup=reply_markup
        )

async def go_to_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_search_options(update)
async def alphabet_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await verify_subscription_and_proceed(update, context, "alphabet")

async def genre_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await verify_subscription_and_proceed(update, context, "genres")

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    image_url = 'https://logodix.com/logo/580915.png' 
    keyboard = [
        [InlineKeyboardButton("–ê–ª—Ñ–∞–≤–∏—Ç", callback_data="alphabet")],
        [InlineKeyboardButton("–ü–æ–¥–∂–∞–Ω—Ä—ã", callback_data="genres")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_photo(
        photo=image_url,
        caption='üé∂ –ü—Ä–∏–≤–µ—Ç, —Ä–æ–∫-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç! –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ '
                '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? \n–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ª—é–±–∏–º—ã—Ö –∫–ª–∏–ø–æ–≤: –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É ‚Äì –µ—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å, '
                '—Å –∫–∞–∫–æ–π –±—É–∫–≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤! –ü–æ –ø–æ–¥–∂–∞–Ω—Ä–∞–º ‚Äì –¥–ª—è —Ç–µ—Ö, '
                '–∫—Ç–æ —Ö–æ—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–æ–∫-–º—É–∑—ã–∫–∏!',
        reply_markup=reply_markup
    )

    await query.message.delete()

async def send_alphabet_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru_alphabet")],
        [InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="en_alphabet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    await query.answer()

    try:
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—Ñ–∞–≤–∏—Ç:',
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.message.reply_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—Ñ–∞–≤–∏—Ç:',
            reply_markup=reply_markup
        )

async def verify_subscription_and_proceed(update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id, context)
    query = update.callback_query
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query
        await query.answer()

        if is_subscribed:
            if callback_data == "alphabet":
                await send_alphabet_selection(update, context)
            elif callback_data == "genres":
                await send_genre_selection(update, context)
        else:
            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ query
                await query.message.edit_text(
                    text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".',
                    reply_markup=reply_markup
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(
                    text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".',
                    reply_markup=reply_markup
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        await query.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

async def send_genre_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    genres = list(rock_genres.keys())
    keyboard = []
    buttons_per_row = 3 
    for i in range(0, len(genres), buttons_per_row):
        row = [InlineKeyboardButton(genre, callback_data=f"genre_{genre}") for genre in genres[i:i + buttons_per_row]]
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    await query.answer()

    try:
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∂–∞–Ω—Ä:',
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.message.reply_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∂–∞–Ω—Ä:',
            reply_markup=reply_markup
        )

async def russian_alphabet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    letters = '–ê –í –ö –ú –ù –û –ü –° –¢'.split()
    keyboard = []

    for i in range(0, len(letters), 4):
        keyboard.append([InlineKeyboardButton(letter, callback_data=f"ru_{letter}") for letter in letters[i:i + 4]])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text='–í—ã–±–∏—Ä–∞–π –±—É–∫–≤—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤:', reply_markup=reply_markup)

async def english_alphabet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    letters = 'A B C D E F G H I K L M N O P Q R S T U V W'.split()
    keyboard = []

    for i in range(0, len(letters), 4):
        keyboard.append([InlineKeyboardButton(letter, callback_data=f"en_{letter}") for letter in letters[i:i + 4]])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text='–í—ã–±–∏—Ä–∞–π –±—É–∫–≤—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤:', reply_markup=reply_markup)
async def handle_alphabet_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "ru_alphabet":
        await russian_alphabet(update, context) 
    elif query.data == "en_alphabet":
        await english_alphabet(update, context)

async def handle_letter_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    letter = query.data.split('_')[1]
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
    bands = [band for genre in rock_genres.values() for band in genre.keys() if band.startswith(letter)]

    if bands:
        keyboard = []
        buttons_per_row = 2
        for i in range(0, len(bands), buttons_per_row):
            row = [InlineKeyboardButton(band, callback_data=band) for band in bands[i:i + buttons_per_row]]
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f'–í —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ ‚Äì –≥—Ä—É–ø–ø—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ –±—É–∫–≤—É {letter}:\n–í—ã–±–µ—Ä–∏ —Å–≤–æ—é '
                                           f'–ª—é–±–∏–º—É—é –∫–æ–º–∞–Ω–¥—É –∏ –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!',
                                       reply_markup=reply_markup)
    else:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É {letter} –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–≤, –Ω–æ —Å–∫–æ—Ä–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.',
            reply_markup=reply_markup)

async def band_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    band = query.data
    genre = next(gen for gen in rock_genres if band in rock_genres[gen])
    tracks = rock_genres[genre][band]
    keyboard = []
    buttons_per_row = 3 
    track_items = list(tracks.items())
    for i in range(0, len(track_items), buttons_per_row):
        row = [InlineKeyboardButton(track, url=url) for track, url in track_items[i:i + buttons_per_row]]
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    new_text = (f'üéµ –í—Å—Ç—Ä–µ—á–∞–π —Ç–≤–æ—Ä–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {band}\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏—Ö —Ö–∏—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ–∫–ª–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ '
                 f'—Ç–æ—á–Ω–æ –∑–∞—Å—Ç–∞–≤—è—Ç —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è –≤ —Ä–∏—Ç–º–µ —Ä–æ–∫–∞. –í—ã–±–∏—Ä–∞–π —Ç—Ä–µ–∫ –∏ –ø–æ–≥—Ä—É–∂–∞–π—Å—è –≤ '
                 f'–º–∏—Ä –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –º—É–∑—ã–∫–∏!')
    if query.message.text != new_text or query.message.reply_markup != reply_markup:
        try:
            await query.edit_message_text(text=new_text, reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(new_text, reply_markup=reply_markup)

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await back_to_menu(update, context)

async def select_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    genre = query.data.split('_')[1]
    bands = list(rock_genres[genre].keys())

    buttons_per_row = 3
    keyboard = []

    for i in range(0, len(bands), buttons_per_row):
        row = [InlineKeyboardButton(band, callback_data=band) for band in bands[i:i + buttons_per_row]]
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=f'üé∏ –í–æ—Ç –∫—Ç–æ –≥–æ—Ç–æ–≤ –∑–∞–∫—Ä—É—Ç–∏—Ç—å —Ç–µ–±–µ –≥–æ–ª–æ–≤—É –∑–≤—É–∫–∞–º–∏ —Ä–æ–∫–∞ –≤ –ø–æ–¥–∂–∞–Ω—Ä–µ {genre}:\n'
                                       f'–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –ª—é–±–∏–º—É—é –∫–æ–º–∞–Ω–¥—É –∏ –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!',
                                  reply_markup=reply_markup)

def main() -> None:
    app = ApplicationBuilder().token().build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_back, pattern='^back$'))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back$'))
    app.add_handler(CallbackQueryHandler(alphabet_selection, pattern='^alphabet$'))
    app.add_handler(CallbackQueryHandler(genre_selection, pattern='^genres$'))
    app.add_handler(CallbackQueryHandler(check_subscription_handler, pattern='^check_subscription$'))
    app.add_handler(CallbackQueryHandler(select_genre, pattern='^genre_.*$'))
    app.add_handler(CallbackQueryHandler(handle_alphabet_choice, pattern='^(ru_alphabet|en_alphabet)$'))
    app.add_handler(CallbackQueryHandler(band_selection, pattern='|'.join(
        band for bands in rock_genres.values() for band in bands.keys())))
    app.add_handler(CallbackQueryHandler(go_to_search, pattern='^go_to_search$'))
    app.add_handler(CallbackQueryHandler(handle_letter_selection, pattern='^ru_[–ê-–Ø]$'))
    app.add_handler(CallbackQueryHandler(handle_letter_selection, pattern='^en_[A-Z]$'))

    app.run_polling()

if __name__ == '__main__':
    main()
